<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="390" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="373.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="373.00"> </text><svg id="frames" x="10" width="1180" total_samples="28614"><g><title>fts`core::ptr::drop_in_place&lt;fts::solvers::solver::SpeciesSolver&gt; (9 samples, 0.03%)</title><rect x="0.0000%" y="213" width="0.0315%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="9"/><text x="0.2500%" y="223.50"></text></g><g><title>fts`core::ptr::drop_in_place&lt;fts::solvers::block::BlockSolver&gt; (9 samples, 0.03%)</title><rect x="0.0000%" y="197" width="0.0315%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="9"/><text x="0.2500%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (9 samples, 0.03%)</title><rect x="0.0000%" y="181" width="0.0315%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="9"/><text x="0.2500%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (9 samples, 0.03%)</title><rect x="0.0000%" y="165" width="0.0315%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="9"/><text x="0.2500%" y="175.50"></text></g><g><title>fts`core::ptr::drop_in_place&lt;fts::system::system::System&gt; (10 samples, 0.03%)</title><rect x="0.0000%" y="229" width="0.0349%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="10"/><text x="0.2500%" y="239.50"></text></g><g><title>fts`fts::solvers::block::BlockSolver::compute_partition (11 samples, 0.04%)</title><rect x="0.0489%" y="165" width="0.0384%" height="15" fill="rgb(232,128,0)" fg:x="14" fg:w="11"/><text x="0.2989%" y="175.50"></text></g><g><title>fts`ndarray::zip::Zip&lt;(P1,P2),D&gt;::fold (11 samples, 0.04%)</title><rect x="0.0489%" y="149" width="0.0384%" height="15" fill="rgb(207,160,47)" fg:x="14" fg:w="11"/><text x="0.2989%" y="159.50"></text></g><g><title>fts`ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map_inplace (10 samples, 0.03%)</title><rect x="0.0874%" y="149" width="0.0349%" height="15" fill="rgb(228,23,34)" fg:x="25" fg:w="10"/><text x="0.3374%" y="159.50"></text></g><g><title>fts`ndarray::zip::Zip&lt;(P1,P2,P3),D&gt;::for_each (521 samples, 1.82%)</title><rect x="0.1293%" y="149" width="1.8208%" height="15" fill="rgb(218,30,26)" fg:x="37" fg:w="521"/><text x="0.3793%" y="159.50">f..</text></g><g><title>fts`fts::solvers::block::BlockSolver::update_concentration (534 samples, 1.87%)</title><rect x="0.0874%" y="165" width="1.8662%" height="15" fill="rgb(220,122,19)" fg:x="25" fg:w="534"/><text x="0.3374%" y="175.50">f..</text></g><g><title>fts`DYLD-STUB$$exp (20 samples, 0.07%)</title><rect x="1.9536%" y="149" width="0.0699%" height="15" fill="rgb(250,228,42)" fg:x="559" fg:w="20"/><text x="2.2036%" y="159.50"></text></g><g><title>fts`ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_same_shape (217 samples, 0.76%)</title><rect x="2.0235%" y="149" width="0.7584%" height="15" fill="rgb(240,193,28)" fg:x="579" fg:w="217"/><text x="2.2735%" y="159.50"></text></g><g><title>libsystem_m.dylib`exp (184 samples, 0.64%)</title><rect x="2.1388%" y="133" width="0.6430%" height="15" fill="rgb(216,20,37)" fg:x="612" fg:w="184"/><text x="2.3888%" y="143.50"></text></g><g><title>fts`fts::solvers::propagator::PropagatorStep::update_operators (241 samples, 0.84%)</title><rect x="1.9536%" y="165" width="0.8422%" height="15" fill="rgb(206,188,39)" fg:x="559" fg:w="241"/><text x="2.2036%" y="175.50"></text></g><g><title>libsystem_m.dylib`exp (4 samples, 0.01%)</title><rect x="2.7819%" y="149" width="0.0140%" height="15" fill="rgb(217,207,13)" fg:x="796" fg:w="4"/><text x="3.0319%" y="159.50"></text></g><g><title>fts`ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map_inplace (12 samples, 0.04%)</title><rect x="2.7958%" y="165" width="0.0419%" height="15" fill="rgb(231,73,38)" fg:x="800" fg:w="12"/><text x="3.0458%" y="175.50"></text></g><g><title>fts`ndarray::dimension::dimension_trait::Dimension::default_strides (11 samples, 0.04%)</title><rect x="16.7890%" y="133" width="0.0384%" height="15" fill="rgb(225,20,46)" fg:x="4804" fg:w="11"/><text x="17.0390%" y="143.50"></text></g><g><title>fts`ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_same_shape (4,002 samples, 13.99%)</title><rect x="2.8483%" y="165" width="13.9862%" height="15" fill="rgb(210,31,41)" fg:x="815" fg:w="4002"/><text x="3.0983%" y="175.50">fts`ndarray::impl_met..</text></g><g><title>fts`ndarray::dimension::dimension_trait::Dimension::is_contiguous (14 samples, 0.05%)</title><rect x="16.7855%" y="149" width="0.0489%" height="15" fill="rgb(221,200,47)" fg:x="4803" fg:w="14"/><text x="17.0355%" y="159.50"></text></g><g><title>fts`ndarray::zip::Zip&lt;(P1,),D&gt;::and (4 samples, 0.01%)</title><rect x="16.8344%" y="165" width="0.0140%" height="15" fill="rgb(226,26,5)" fg:x="4817" fg:w="4"/><text x="17.0844%" y="175.50"></text></g><g><title>fts`&lt;&amp;mut ndarray::ArrayBase&lt;S,D&gt; as ndarray::zip::ndproducer::IntoNdProducer&gt;::into_producer (3 samples, 0.01%)</title><rect x="16.8379%" y="149" width="0.0105%" height="15" fill="rgb(249,33,26)" fg:x="4818" fg:w="3"/><text x="17.0879%" y="159.50"></text></g><g><title>fts`ndarray::zip::Zip&lt;(P1,P2,P3),D&gt;::for_each (1,388 samples, 4.85%)</title><rect x="16.8484%" y="165" width="4.8508%" height="15" fill="rgb(235,183,28)" fg:x="4821" fg:w="1388"/><text x="17.0984%" y="175.50">fts`nd..</text></g><g><title>fts`ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (4 samples, 0.01%)</title><rect x="21.7166%" y="149" width="0.0140%" height="15" fill="rgb(221,5,38)" fg:x="6214" fg:w="4"/><text x="21.9666%" y="159.50"></text></g><g><title>fts`ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each::_{{closure}} (5 samples, 0.02%)</title><rect x="21.7306%" y="149" width="0.0175%" height="15" fill="rgb(247,18,42)" fg:x="6218" fg:w="5"/><text x="21.9806%" y="159.50"></text></g><g><title>fts`DYLD-STUB$$free (12 samples, 0.04%)</title><rect x="21.7481%" y="133" width="0.0419%" height="15" fill="rgb(241,131,45)" fg:x="6223" fg:w="12"/><text x="21.9981%" y="143.50"></text></g><g><title>fts`__rdl_dealloc (4 samples, 0.01%)</title><rect x="21.7900%" y="133" width="0.0140%" height="15" fill="rgb(249,31,29)" fg:x="6235" fg:w="4"/><text x="22.0400%" y="143.50"></text></g><g><title>fts`ndarray::iterators::to_vec_mapped (6 samples, 0.02%)</title><rect x="21.8075%" y="133" width="0.0210%" height="15" fill="rgb(225,111,53)" fg:x="6240" fg:w="6"/><text x="22.0575%" y="143.50"></text></g><g><title>fts`DYLD-STUB$$malloc (5 samples, 0.02%)</title><rect x="21.8844%" y="117" width="0.0175%" height="15" fill="rgb(238,160,17)" fg:x="6262" fg:w="5"/><text x="22.1344%" y="127.50"></text></g><g><title>fts`DYLD-STUB$$memcpy (7 samples, 0.02%)</title><rect x="21.9019%" y="117" width="0.0245%" height="15" fill="rgb(214,148,48)" fg:x="6267" fg:w="7"/><text x="22.1519%" y="127.50"></text></g><g><title>fts`__rdl_alloc (6 samples, 0.02%)</title><rect x="21.9263%" y="117" width="0.0210%" height="15" fill="rgb(232,36,49)" fg:x="6274" fg:w="6"/><text x="22.1763%" y="127.50"></text></g><g><title>fts`ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_same_shape (614 samples, 2.15%)</title><rect x="21.9473%" y="117" width="2.1458%" height="15" fill="rgb(209,103,24)" fg:x="6280" fg:w="614"/><text x="22.1973%" y="127.50">f..</text></g><g><title>fts`ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (601 samples, 2.10%)</title><rect x="21.9927%" y="101" width="2.1004%" height="15" fill="rgb(229,88,8)" fg:x="6293" fg:w="601"/><text x="22.2427%" y="111.50">f..</text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (6 samples, 0.02%)</title><rect x="26.1026%" y="101" width="0.0210%" height="15" fill="rgb(213,181,19)" fg:x="7469" fg:w="6"/><text x="26.3526%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (7 samples, 0.02%)</title><rect x="26.1376%" y="85" width="0.0245%" height="15" fill="rgb(254,191,54)" fg:x="7479" fg:w="7"/><text x="26.3876%" y="95.50"></text></g><g><title>fts`ndarray::iterators::to_vec_mapped (596 samples, 2.08%)</title><rect x="24.0931%" y="117" width="2.0829%" height="15" fill="rgb(241,83,37)" fg:x="6894" fg:w="596"/><text x="24.3431%" y="127.50">f..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (15 samples, 0.05%)</title><rect x="26.1236%" y="101" width="0.0524%" height="15" fill="rgb(233,36,39)" fg:x="7475" fg:w="15"/><text x="26.3736%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (4 samples, 0.01%)</title><rect x="26.1620%" y="85" width="0.0140%" height="15" fill="rgb(226,3,54)" fg:x="7486" fg:w="4"/><text x="26.4120%" y="95.50"></text></g><g><title>fts`ndrustfft::FftHandler&lt;T&gt;::fft_lane (9 samples, 0.03%)</title><rect x="26.1760%" y="117" width="0.0315%" height="15" fill="rgb(245,192,40)" fg:x="7490" fg:w="9"/><text x="26.4260%" y="127.50"></text></g><g><title>fts`rustfft::array_utils::iter_chunks (1,057 samples, 3.69%)</title><rect x="26.2739%" y="101" width="3.6940%" height="15" fill="rgb(238,167,29)" fg:x="7518" fg:w="1057"/><text x="26.5239%" y="111.50">fts`..</text></g><g><title>fts`rustfft::algorithm::radix4::bitreversed_transpose (441 samples, 1.54%)</title><rect x="35.6329%" y="85" width="1.5412%" height="15" fill="rgb(232,182,51)" fg:x="10196" fg:w="441"/><text x="35.8829%" y="95.50"></text></g><g><title>fts`rustfft::neon::neon_radix4::Neon64Radix4&lt;T&gt;::perform_fft_out_of_place (2,126 samples, 7.43%)</title><rect x="29.9678%" y="101" width="7.4299%" height="15" fill="rgb(231,60,39)" fg:x="8575" fg:w="2126"/><text x="30.2178%" y="111.50">fts`rustff..</text></g><g><title>fts`rustfft::algorithm::radix4::reverse_bits (64 samples, 0.22%)</title><rect x="37.1741%" y="85" width="0.2237%" height="15" fill="rgb(208,69,12)" fg:x="10637" fg:w="64"/><text x="37.4241%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (5 samples, 0.02%)</title><rect x="37.3978%" y="101" width="0.0175%" height="15" fill="rgb(235,93,37)" fg:x="10701" fg:w="5"/><text x="37.6478%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (13 samples, 0.05%)</title><rect x="37.4537%" y="85" width="0.0454%" height="15" fill="rgb(213,116,39)" fg:x="10717" fg:w="13"/><text x="37.7037%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (3 samples, 0.01%)</title><rect x="37.5306%" y="69" width="0.0105%" height="15" fill="rgb(222,207,29)" fg:x="10739" fg:w="3"/><text x="37.7806%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (23 samples, 0.08%)</title><rect x="37.6214%" y="53" width="0.0804%" height="15" fill="rgb(206,96,30)" fg:x="10765" fg:w="23"/><text x="37.8714%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (10 samples, 0.03%)</title><rect x="37.7018%" y="53" width="0.0349%" height="15" fill="rgb(218,138,4)" fg:x="10788" fg:w="10"/><text x="37.9518%" y="63.50"></text></g><g><title>fts`rustfft::Fft::process (3,319 samples, 11.60%)</title><rect x="26.2075%" y="117" width="11.5992%" height="15" fill="rgb(250,191,14)" fg:x="7499" fg:w="3319"/><text x="26.4575%" y="127.50">fts`rustfft::Fft:..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (112 samples, 0.39%)</title><rect x="37.4153%" y="101" width="0.3914%" height="15" fill="rgb(239,60,40)" fg:x="10706" fg:w="112"/><text x="37.6653%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (87 samples, 0.30%)</title><rect x="37.5026%" y="85" width="0.3040%" height="15" fill="rgb(206,27,48)" fg:x="10731" fg:w="87"/><text x="37.7526%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (76 samples, 0.27%)</title><rect x="37.5411%" y="69" width="0.2656%" height="15" fill="rgb(225,35,8)" fg:x="10742" fg:w="76"/><text x="37.7911%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (20 samples, 0.07%)</title><rect x="37.7368%" y="53" width="0.0699%" height="15" fill="rgb(250,213,24)" fg:x="10798" fg:w="20"/><text x="37.9868%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (29 samples, 0.10%)</title><rect x="37.8102%" y="117" width="0.1013%" height="15" fill="rgb(247,123,22)" fg:x="10819" fg:w="29"/><text x="38.0602%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (5 samples, 0.02%)</title><rect x="37.9115%" y="117" width="0.0175%" height="15" fill="rgb(231,138,38)" fg:x="10848" fg:w="5"/><text x="38.1615%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (26 samples, 0.09%)</title><rect x="37.9290%" y="117" width="0.0909%" height="15" fill="rgb(231,145,46)" fg:x="10853" fg:w="26"/><text x="38.1790%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (16 samples, 0.06%)</title><rect x="38.2365%" y="101" width="0.0559%" height="15" fill="rgb(251,118,11)" fg:x="10941" fg:w="16"/><text x="38.4865%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (7 samples, 0.02%)</title><rect x="38.2924%" y="101" width="0.0245%" height="15" fill="rgb(217,147,25)" fg:x="10957" fg:w="7"/><text x="38.5424%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (12 samples, 0.04%)</title><rect x="38.3169%" y="101" width="0.0419%" height="15" fill="rgb(247,81,37)" fg:x="10964" fg:w="12"/><text x="38.5669%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_small (108 samples, 0.38%)</title><rect x="38.0199%" y="117" width="0.3774%" height="15" fill="rgb(209,12,38)" fg:x="10879" fg:w="108"/><text x="38.2699%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (11 samples, 0.04%)</title><rect x="38.3588%" y="101" width="0.0384%" height="15" fill="rgb(227,1,9)" fg:x="10976" fg:w="11"/><text x="38.6088%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.02%)</title><rect x="38.3973%" y="117" width="0.0175%" height="15" fill="rgb(248,47,43)" fg:x="10987" fg:w="5"/><text x="38.6473%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (3 samples, 0.01%)</title><rect x="38.4183%" y="117" width="0.0105%" height="15" fill="rgb(221,10,30)" fg:x="10993" fg:w="3"/><text x="38.6683%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (8 samples, 0.03%)</title><rect x="38.4287%" y="117" width="0.0280%" height="15" fill="rgb(210,229,1)" fg:x="10996" fg:w="8"/><text x="38.6787%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (622 samples, 2.17%)</title><rect x="38.4637%" y="117" width="2.1738%" height="15" fill="rgb(222,148,37)" fg:x="11006" fg:w="622"/><text x="38.7137%" y="127.50">l..</text></g><g><title>fts`ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each::_{{closure}} (5,618 samples, 19.63%)</title><rect x="21.8285%" y="133" width="19.6337%" height="15" fill="rgb(234,67,33)" fg:x="6246" fg:w="5618"/><text x="22.0785%" y="143.50">fts`ndarray::zip::Zip&lt;(P1,P2),D..</text></g><g><title>libsystem_platform.dylib`_platform_memset (236 samples, 0.82%)</title><rect x="40.6375%" y="117" width="0.8248%" height="15" fill="rgb(247,98,35)" fg:x="11628" fg:w="236"/><text x="40.8875%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_free (45 samples, 0.16%)</title><rect x="41.4657%" y="133" width="0.1573%" height="15" fill="rgb(247,138,52)" fg:x="11865" fg:w="45"/><text x="41.7157%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (10 samples, 0.03%)</title><rect x="41.6230%" y="133" width="0.0349%" height="15" fill="rgb(213,79,30)" fg:x="11910" fg:w="10"/><text x="41.8730%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (5 samples, 0.02%)</title><rect x="41.6579%" y="133" width="0.0175%" height="15" fill="rgb(246,177,23)" fg:x="11920" fg:w="5"/><text x="41.9079%" y="143.50"></text></g><g><title>fts`ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (5,710 samples, 19.96%)</title><rect x="21.7481%" y="149" width="19.9553%" height="15" fill="rgb(230,62,27)" fg:x="6223" fg:w="5710"/><text x="21.9981%" y="159.50">fts`ndarray::zip::Zip&lt;(P1,P2),D..</text></g><g><title>libsystem_malloc.dylib`free_small (8 samples, 0.03%)</title><rect x="41.6754%" y="133" width="0.0280%" height="15" fill="rgb(216,154,8)" fg:x="11925" fg:w="8"/><text x="41.9254%" y="143.50"></text></g><g><title>fts`ndrustfft::ndfft (5,726 samples, 20.01%)</title><rect x="21.7062%" y="165" width="20.0112%" height="15" fill="rgb(244,35,45)" fg:x="6211" fg:w="5726"/><text x="21.9562%" y="175.50">fts`ndrustfft::ndfft</text></g><g><title>fts`DYLD-STUB$$free (8 samples, 0.03%)</title><rect x="41.7208%" y="149" width="0.0280%" height="15" fill="rgb(251,115,12)" fg:x="11938" fg:w="8"/><text x="41.9708%" y="159.50"></text></g><g><title>fts`__rdl_dealloc (3 samples, 0.01%)</title><rect x="41.7488%" y="149" width="0.0105%" height="15" fill="rgb(240,54,50)" fg:x="11946" fg:w="3"/><text x="41.9988%" y="159.50"></text></g><g><title>fts`ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::rows (3 samples, 0.01%)</title><rect x="41.7593%" y="149" width="0.0105%" height="15" fill="rgb(233,84,52)" fg:x="11949" fg:w="3"/><text x="42.0093%" y="159.50"></text></g><g><title>fts`ndarray::iterators::lanes::Lanes&lt;A,D&gt;::new (3 samples, 0.01%)</title><rect x="41.7593%" y="133" width="0.0105%" height="15" fill="rgb(207,117,47)" fg:x="11949" fg:w="3"/><text x="42.0093%" y="143.50"></text></g><g><title>fts`&lt;realfft::RealToComplexEven&lt;T&gt; as realfft::RealToComplex&lt;T&gt;&gt;::process (7 samples, 0.02%)</title><rect x="41.7872%" y="133" width="0.0245%" height="15" fill="rgb(249,43,39)" fg:x="11957" fg:w="7"/><text x="42.0372%" y="143.50"></text></g><g><title>fts`DYLD-STUB$$calloc (5 samples, 0.02%)</title><rect x="41.8117%" y="133" width="0.0175%" height="15" fill="rgb(209,38,44)" fg:x="11964" fg:w="5"/><text x="42.0617%" y="143.50"></text></g><g><title>fts`__rdl_alloc_zeroed (5 samples, 0.02%)</title><rect x="41.8327%" y="133" width="0.0175%" height="15" fill="rgb(236,212,23)" fg:x="11970" fg:w="5"/><text x="42.0827%" y="143.50"></text></g><g><title>fts`rustfft::algorithm::radix4::bitreversed_transpose (10 samples, 0.03%)</title><rect x="45.7608%" y="69" width="0.0349%" height="15" fill="rgb(242,79,21)" fg:x="13094" fg:w="10"/><text x="46.0108%" y="79.50"></text></g><g><title>fts`rustfft::array_utils::iter_chunks (676 samples, 2.36%)</title><rect x="45.7958%" y="69" width="2.3625%" height="15" fill="rgb(211,96,35)" fg:x="13104" fg:w="676"/><text x="46.0458%" y="79.50">ft..</text></g><g><title>fts`rustfft::algorithm::radix4::bitreversed_transpose (563 samples, 1.97%)</title><rect x="53.7709%" y="53" width="1.9676%" height="15" fill="rgb(253,215,40)" fg:x="15386" fg:w="563"/><text x="54.0209%" y="63.50">f..</text></g><g><title>fts`&lt;rustfft::neon::neon_radix4::Neon64Radix4&lt;T&gt; as rustfft::Fft&lt;T&gt;&gt;::process_outofplace_with_scratch (2,999 samples, 10.48%)</title><rect x="45.7119%" y="85" width="10.4809%" height="15" fill="rgb(211,81,21)" fg:x="13080" fg:w="2999"/><text x="45.9619%" y="95.50">fts`&lt;rustfft::n..</text></g><g><title>fts`rustfft::neon::neon_radix4::Neon64Radix4&lt;T&gt;::perform_fft_out_of_place (2,299 samples, 8.03%)</title><rect x="48.1582%" y="69" width="8.0345%" height="15" fill="rgb(208,190,38)" fg:x="13780" fg:w="2299"/><text x="48.4082%" y="79.50">fts`rustfft..</text></g><g><title>fts`rustfft::algorithm::radix4::reverse_bits (130 samples, 0.45%)</title><rect x="55.7384%" y="53" width="0.4543%" height="15" fill="rgb(235,213,38)" fg:x="15949" fg:w="130"/><text x="55.9884%" y="63.50"></text></g><g><title>fts`&lt;realfft::RealToComplexEven&lt;T&gt; as realfft::RealToComplex&lt;T&gt;&gt;::process_with_scratch (4,080 samples, 14.26%)</title><rect x="41.9690%" y="101" width="14.2588%" height="15" fill="rgb(237,122,38)" fg:x="12009" fg:w="4080"/><text x="42.2190%" y="111.50">fts`&lt;realfft::RealToCo..</text></g><g><title>fts`rustfft::neon::neon_radix4::Neon64Radix4&lt;T&gt;::perform_fft_out_of_place (10 samples, 0.03%)</title><rect x="56.1928%" y="85" width="0.0349%" height="15" fill="rgb(244,218,35)" fg:x="16079" fg:w="10"/><text x="56.4428%" y="95.50"></text></g><g><title>fts`&lt;realfft::RealToComplexEven&lt;T&gt; as realfft::RealToComplex&lt;T&gt;&gt;::process (4,090 samples, 14.29%)</title><rect x="41.9480%" y="117" width="14.2937%" height="15" fill="rgb(240,68,47)" fg:x="12003" fg:w="4090"/><text x="42.1980%" y="127.50">fts`&lt;realfft::RealToCo..</text></g><g><title>fts`&lt;rustfft::neon::neon_radix4::Neon64Radix4&lt;T&gt; as rustfft::Fft&lt;T&gt;&gt;::process_outofplace_with_scratch (4 samples, 0.01%)</title><rect x="56.2277%" y="101" width="0.0140%" height="15" fill="rgb(210,16,53)" fg:x="16089" fg:w="4"/><text x="56.4777%" y="111.50"></text></g><g><title>fts`&lt;realfft::RealToComplexEven&lt;T&gt; as realfft::RealToComplex&lt;T&gt;&gt;::process_with_scratch (15 samples, 0.05%)</title><rect x="56.2417%" y="117" width="0.0524%" height="15" fill="rgb(235,124,12)" fg:x="16093" fg:w="15"/><text x="56.4917%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (10 samples, 0.03%)</title><rect x="56.2941%" y="117" width="0.0349%" height="15" fill="rgb(224,169,11)" fg:x="16108" fg:w="10"/><text x="56.5441%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (9 samples, 0.03%)</title><rect x="56.3291%" y="117" width="0.0315%" height="15" fill="rgb(250,166,2)" fg:x="16118" fg:w="9"/><text x="56.5791%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (33 samples, 0.12%)</title><rect x="56.4164%" y="101" width="0.1153%" height="15" fill="rgb(242,216,29)" fg:x="16143" fg:w="33"/><text x="56.6664%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (18 samples, 0.06%)</title><rect x="56.5318%" y="101" width="0.0629%" height="15" fill="rgb(230,116,27)" fg:x="16176" fg:w="18"/><text x="56.7818%" y="111.50"></text></g><g><title>fts`ndrustfft::R2cFftHandler&lt;T&gt;::fft_r2c_lane (4,461 samples, 15.59%)</title><rect x="41.8501%" y="133" width="15.5903%" height="15" fill="rgb(228,99,48)" fg:x="11975" fg:w="4461"/><text x="42.1001%" y="143.50">fts`ndrustfft::R2cFftHan..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (309 samples, 1.08%)</title><rect x="56.3605%" y="117" width="1.0799%" height="15" fill="rgb(253,11,6)" fg:x="16127" fg:w="309"/><text x="56.6105%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (242 samples, 0.85%)</title><rect x="56.5947%" y="101" width="0.8457%" height="15" fill="rgb(247,143,39)" fg:x="16194" fg:w="242"/><text x="56.8447%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (33 samples, 0.12%)</title><rect x="57.4404%" y="133" width="0.1153%" height="15" fill="rgb(236,97,10)" fg:x="16436" fg:w="33"/><text x="57.6904%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.01%)</title><rect x="57.5557%" y="133" width="0.0105%" height="15" fill="rgb(233,208,19)" fg:x="16469" fg:w="3"/><text x="57.8057%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (12 samples, 0.04%)</title><rect x="57.5662%" y="133" width="0.0419%" height="15" fill="rgb(216,164,2)" fg:x="16472" fg:w="12"/><text x="57.8162%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_small (70 samples, 0.24%)</title><rect x="57.6082%" y="133" width="0.2446%" height="15" fill="rgb(220,129,5)" fg:x="16484" fg:w="70"/><text x="57.8582%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (10 samples, 0.03%)</title><rect x="57.8528%" y="133" width="0.0349%" height="15" fill="rgb(242,17,10)" fg:x="16554" fg:w="10"/><text x="58.1028%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_calloc (3 samples, 0.01%)</title><rect x="57.8877%" y="133" width="0.0105%" height="15" fill="rgb(242,107,0)" fg:x="16564" fg:w="3"/><text x="58.1377%" y="143.50"></text></g><g><title>fts`ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (4,935 samples, 17.25%)</title><rect x="41.7802%" y="149" width="17.2468%" height="15" fill="rgb(251,28,31)" fg:x="11955" fg:w="4935"/><text x="42.0302%" y="159.50">fts`ndarray::zip::Zip&lt;(P1,P..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (323 samples, 1.13%)</title><rect x="57.8982%" y="133" width="1.1288%" height="15" fill="rgb(233,223,10)" fg:x="16567" fg:w="323"/><text x="58.1482%" y="143.50"></text></g><g><title>fts`ndrustfft::R2cFftHandler&lt;T&gt;::fft_r2c_lane (3 samples, 0.01%)</title><rect x="59.0270%" y="149" width="0.0105%" height="15" fill="rgb(215,21,27)" fg:x="16890" fg:w="3"/><text x="59.2770%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_free (22 samples, 0.08%)</title><rect x="59.0375%" y="149" width="0.0769%" height="15" fill="rgb(232,23,21)" fg:x="16893" fg:w="22"/><text x="59.2875%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (12 samples, 0.04%)</title><rect x="59.1144%" y="149" width="0.0419%" height="15" fill="rgb(244,5,23)" fg:x="16915" fg:w="12"/><text x="59.3644%" y="159.50"></text></g><g><title>fts`ndrustfft::ndfft_r2c (4,997 samples, 17.46%)</title><rect x="41.7173%" y="165" width="17.4635%" height="15" fill="rgb(226,81,46)" fg:x="11937" fg:w="4997"/><text x="41.9673%" y="175.50">fts`ndrustfft::ndfft_r2c</text></g><g><title>libsystem_malloc.dylib`_szone_free (7 samples, 0.02%)</title><rect x="59.1564%" y="149" width="0.0245%" height="15" fill="rgb(247,70,30)" fg:x="16927" fg:w="7"/><text x="59.4064%" y="159.50"></text></g><g><title>fts`ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (7 samples, 0.02%)</title><rect x="59.2053%" y="149" width="0.0245%" height="15" fill="rgb(212,68,19)" fg:x="16941" fg:w="7"/><text x="59.4553%" y="159.50"></text></g><g><title>fts`ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each::_{{closure}} (7 samples, 0.02%)</title><rect x="59.2297%" y="149" width="0.0245%" height="15" fill="rgb(240,187,13)" fg:x="16948" fg:w="7"/><text x="59.4797%" y="159.50"></text></g><g><title>fts`ndarray::iterators::to_vec_mapped (5 samples, 0.02%)</title><rect x="59.2577%" y="133" width="0.0175%" height="15" fill="rgb(223,113,26)" fg:x="16956" fg:w="5"/><text x="59.5077%" y="143.50"></text></g><g><title>fts`DYLD-STUB$$free (4 samples, 0.01%)</title><rect x="59.3486%" y="117" width="0.0140%" height="15" fill="rgb(206,192,2)" fg:x="16982" fg:w="4"/><text x="59.5986%" y="127.50"></text></g><g><title>fts`__rdl_dealloc (4 samples, 0.01%)</title><rect x="59.3800%" y="117" width="0.0140%" height="15" fill="rgb(241,108,4)" fg:x="16991" fg:w="4"/><text x="59.6300%" y="127.50"></text></g><g><title>fts`ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_same_shape (562 samples, 1.96%)</title><rect x="59.3940%" y="117" width="1.9641%" height="15" fill="rgb(247,173,49)" fg:x="16995" fg:w="562"/><text x="59.6440%" y="127.50">f..</text></g><g><title>fts`ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (558 samples, 1.95%)</title><rect x="59.4080%" y="101" width="1.9501%" height="15" fill="rgb(224,114,35)" fg:x="16999" fg:w="558"/><text x="59.6580%" y="111.50">f..</text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (18 samples, 0.06%)</title><rect x="63.6157%" y="85" width="0.0629%" height="15" fill="rgb(245,159,27)" fg:x="18203" fg:w="18"/><text x="63.8657%" y="95.50"></text></g><g><title>fts`ndarray::iterators::to_vec_mapped (671 samples, 2.35%)</title><rect x="61.3581%" y="117" width="2.3450%" height="15" fill="rgb(245,172,44)" fg:x="17557" fg:w="671"/><text x="61.6081%" y="127.50">f..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (30 samples, 0.10%)</title><rect x="63.5982%" y="101" width="0.1048%" height="15" fill="rgb(236,23,11)" fg:x="18198" fg:w="30"/><text x="63.8482%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (7 samples, 0.02%)</title><rect x="63.6786%" y="85" width="0.0245%" height="15" fill="rgb(205,117,38)" fg:x="18221" fg:w="7"/><text x="63.9286%" y="95.50"></text></g><g><title>fts`__rdl_alloc (3 samples, 0.01%)</title><rect x="64.8109%" y="101" width="0.0105%" height="15" fill="rgb(237,72,25)" fg:x="18545" fg:w="3"/><text x="65.0609%" y="111.50"></text></g><g><title>fts`rustfft::algorithm::radix4::bitreversed_transpose (5 samples, 0.02%)</title><rect x="64.8983%" y="85" width="0.0175%" height="15" fill="rgb(244,70,9)" fg:x="18570" fg:w="5"/><text x="65.1483%" y="95.50"></text></g><g><title>fts`rustfft::array_utils::iter_chunks (1,140 samples, 3.98%)</title><rect x="64.9158%" y="85" width="3.9841%" height="15" fill="rgb(217,125,39)" fg:x="18575" fg:w="1140"/><text x="65.1658%" y="95.50">fts`..</text></g><g><title>fts`rustfft::algorithm::radix4::bitreversed_transpose (428 samples, 1.50%)</title><rect x="74.5439%" y="69" width="1.4958%" height="15" fill="rgb(235,36,10)" fg:x="21330" fg:w="428"/><text x="74.7939%" y="79.50"></text></g><g><title>fts`rustfft::neon::neon_radix4::Neon64Radix4&lt;T&gt;::perform_fft_out_of_place (2,115 samples, 7.39%)</title><rect x="68.8998%" y="85" width="7.3915%" height="15" fill="rgb(251,123,47)" fg:x="19715" fg:w="2115"/><text x="69.1498%" y="95.50">fts`rustff..</text></g><g><title>fts`rustfft::algorithm::radix4::reverse_bits (72 samples, 0.25%)</title><rect x="76.0397%" y="69" width="0.2516%" height="15" fill="rgb(221,13,13)" fg:x="21758" fg:w="72"/><text x="76.2897%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (9 samples, 0.03%)</title><rect x="76.2913%" y="85" width="0.0315%" height="15" fill="rgb(238,131,9)" fg:x="21830" fg:w="9"/><text x="76.5413%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (15 samples, 0.05%)</title><rect x="76.3542%" y="69" width="0.0524%" height="15" fill="rgb(211,50,8)" fg:x="21848" fg:w="15"/><text x="76.6042%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (4 samples, 0.01%)</title><rect x="76.4067%" y="69" width="0.0140%" height="15" fill="rgb(245,182,24)" fg:x="21863" fg:w="4"/><text x="76.6567%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (3 samples, 0.01%)</title><rect x="76.4556%" y="53" width="0.0105%" height="15" fill="rgb(242,14,37)" fg:x="21877" fg:w="3"/><text x="76.7056%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (25 samples, 0.09%)</title><rect x="76.5115%" y="37" width="0.0874%" height="15" fill="rgb(246,228,12)" fg:x="21893" fg:w="25"/><text x="76.7615%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (11 samples, 0.04%)</title><rect x="76.5989%" y="37" width="0.0384%" height="15" fill="rgb(213,55,15)" fg:x="21918" fg:w="11"/><text x="76.8489%" y="47.50"></text></g><g><title>fts`rustfft::Fft::process (3,392 samples, 11.85%)</title><rect x="64.8214%" y="101" width="11.8543%" height="15" fill="rgb(209,9,3)" fg:x="18548" fg:w="3392"/><text x="65.0714%" y="111.50">fts`rustfft::Fft::..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (101 samples, 0.35%)</title><rect x="76.3228%" y="85" width="0.3530%" height="15" fill="rgb(230,59,30)" fg:x="21839" fg:w="101"/><text x="76.5728%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (73 samples, 0.26%)</title><rect x="76.4206%" y="69" width="0.2551%" height="15" fill="rgb(209,121,21)" fg:x="21867" fg:w="73"/><text x="76.6706%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (60 samples, 0.21%)</title><rect x="76.4661%" y="53" width="0.2097%" height="15" fill="rgb(220,109,13)" fg:x="21880" fg:w="60"/><text x="76.7161%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (11 samples, 0.04%)</title><rect x="76.6373%" y="37" width="0.0384%" height="15" fill="rgb(232,18,1)" fg:x="21929" fg:w="11"/><text x="76.8873%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (11 samples, 0.04%)</title><rect x="76.6827%" y="101" width="0.0384%" height="15" fill="rgb(215,41,42)" fg:x="21942" fg:w="11"/><text x="76.9327%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 0.01%)</title><rect x="76.7212%" y="101" width="0.0140%" height="15" fill="rgb(224,123,36)" fg:x="21953" fg:w="4"/><text x="76.9712%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (10 samples, 0.03%)</title><rect x="76.7352%" y="101" width="0.0349%" height="15" fill="rgb(240,125,3)" fg:x="21957" fg:w="10"/><text x="76.9852%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_small (24 samples, 0.08%)</title><rect x="76.7701%" y="101" width="0.0839%" height="15" fill="rgb(205,98,50)" fg:x="21967" fg:w="24"/><text x="77.0201%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.01%)</title><rect x="76.8540%" y="101" width="0.0140%" height="15" fill="rgb(205,185,37)" fg:x="21991" fg:w="4"/><text x="77.1040%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.01%)</title><rect x="76.8680%" y="101" width="0.0105%" height="15" fill="rgb(238,207,15)" fg:x="21995" fg:w="3"/><text x="77.1180%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (332 samples, 1.16%)</title><rect x="76.8854%" y="101" width="1.1603%" height="15" fill="rgb(213,199,42)" fg:x="22000" fg:w="332"/><text x="77.1354%" y="111.50"></text></g><g><title>fts`ndrustfft::FftHandler&lt;T&gt;::ifft_lane (4,317 samples, 15.09%)</title><rect x="63.7031%" y="117" width="15.0870%" height="15" fill="rgb(235,201,11)" fg:x="18228" fg:w="4317"/><text x="63.9531%" y="127.50">fts`ndrustfft::FftHandl..</text></g><g><title>libsystem_platform.dylib`_platform_memset (213 samples, 0.74%)</title><rect x="78.0457%" y="101" width="0.7444%" height="15" fill="rgb(207,46,11)" fg:x="22332" fg:w="213"/><text x="78.2957%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_free (16 samples, 0.06%)</title><rect x="78.7936%" y="117" width="0.0559%" height="15" fill="rgb(241,35,35)" fg:x="22546" fg:w="16"/><text x="79.0436%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (16 samples, 0.06%)</title><rect x="78.8495%" y="117" width="0.0559%" height="15" fill="rgb(243,32,47)" fg:x="22562" fg:w="16"/><text x="79.0995%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (9 samples, 0.03%)</title><rect x="78.9054%" y="117" width="0.0315%" height="15" fill="rgb(247,202,23)" fg:x="22578" fg:w="9"/><text x="79.1554%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (15 samples, 0.05%)</title><rect x="78.9369%" y="117" width="0.0524%" height="15" fill="rgb(219,102,11)" fg:x="22587" fg:w="15"/><text x="79.1869%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (15 samples, 0.05%)</title><rect x="79.1606%" y="101" width="0.0524%" height="15" fill="rgb(243,110,44)" fg:x="22651" fg:w="15"/><text x="79.4106%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (5 samples, 0.02%)</title><rect x="79.2130%" y="101" width="0.0175%" height="15" fill="rgb(222,74,54)" fg:x="22666" fg:w="5"/><text x="79.4630%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (6 samples, 0.02%)</title><rect x="79.2304%" y="101" width="0.0210%" height="15" fill="rgb(216,99,12)" fg:x="22671" fg:w="6"/><text x="79.4804%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_small (92 samples, 0.32%)</title><rect x="78.9893%" y="117" width="0.3215%" height="15" fill="rgb(226,22,26)" fg:x="22602" fg:w="92"/><text x="79.2393%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (17 samples, 0.06%)</title><rect x="79.2514%" y="101" width="0.0594%" height="15" fill="rgb(217,163,10)" fg:x="22677" fg:w="17"/><text x="79.5014%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.01%)</title><rect x="79.3108%" y="117" width="0.0140%" height="15" fill="rgb(213,25,53)" fg:x="22694" fg:w="4"/><text x="79.5608%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (3 samples, 0.01%)</title><rect x="79.3248%" y="117" width="0.0105%" height="15" fill="rgb(252,105,26)" fg:x="22698" fg:w="3"/><text x="79.5748%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.01%)</title><rect x="79.3388%" y="117" width="0.0105%" height="15" fill="rgb(220,39,43)" fg:x="22702" fg:w="3"/><text x="79.5888%" y="127.50"></text></g><g><title>fts`ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each::_{{closure}} (6,017 samples, 21.03%)</title><rect x="59.2752%" y="133" width="21.0282%" height="15" fill="rgb(229,68,48)" fg:x="16961" fg:w="6017"/><text x="59.5252%" y="143.50">fts`ndarray::zip::Zip&lt;(P1,P2),D&gt;:..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (273 samples, 0.95%)</title><rect x="79.3493%" y="117" width="0.9541%" height="15" fill="rgb(252,8,32)" fg:x="22705" fg:w="273"/><text x="79.5993%" y="127.50"></text></g><g><title>fts`ndrustfft::FftHandler&lt;T&gt;::ifft_lane (3 samples, 0.01%)</title><rect x="80.3033%" y="133" width="0.0105%" height="15" fill="rgb(223,20,43)" fg:x="22978" fg:w="3"/><text x="80.5533%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_free (15 samples, 0.05%)</title><rect x="80.3138%" y="133" width="0.0524%" height="15" fill="rgb(229,81,49)" fg:x="22981" fg:w="15"/><text x="80.5638%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (11 samples, 0.04%)</title><rect x="80.3663%" y="133" width="0.0384%" height="15" fill="rgb(236,28,36)" fg:x="22996" fg:w="11"/><text x="80.6163%" y="143.50"></text></g><g><title>fts`ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (6,056 samples, 21.16%)</title><rect x="59.2542%" y="149" width="21.1645%" height="15" fill="rgb(249,185,26)" fg:x="16955" fg:w="6056"/><text x="59.5042%" y="159.50">fts`ndarray::zip::Zip&lt;(P1,P2),D&gt;:..</text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (8 samples, 0.03%)</title><rect x="80.4187%" y="149" width="0.0280%" height="15" fill="rgb(249,174,33)" fg:x="23011" fg:w="8"/><text x="80.6687%" y="159.50"></text></g><g><title>fts`ndrustfft::ndifft (6,086 samples, 21.27%)</title><rect x="59.1808%" y="165" width="21.2693%" height="15" fill="rgb(233,201,37)" fg:x="16934" fg:w="6086"/><text x="59.4308%" y="175.50">fts`ndrustfft::ndifft</text></g><g><title>fts`DYLD-STUB$$free (6 samples, 0.02%)</title><rect x="80.4536%" y="149" width="0.0210%" height="15" fill="rgb(221,78,26)" fg:x="23021" fg:w="6"/><text x="80.7036%" y="159.50"></text></g><g><title>fts`__rdl_dealloc (4 samples, 0.01%)</title><rect x="80.4746%" y="149" width="0.0140%" height="15" fill="rgb(250,127,30)" fg:x="23027" fg:w="4"/><text x="80.7246%" y="159.50"></text></g><g><title>fts`ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::rows (6 samples, 0.02%)</title><rect x="80.4886%" y="149" width="0.0210%" height="15" fill="rgb(230,49,44)" fg:x="23031" fg:w="6"/><text x="80.7386%" y="159.50"></text></g><g><title>fts`ndarray::iterators::lanes::Lanes&lt;A,D&gt;::new (3 samples, 0.01%)</title><rect x="80.4991%" y="133" width="0.0105%" height="15" fill="rgb(229,67,23)" fg:x="23034" fg:w="3"/><text x="80.7491%" y="143.50"></text></g><g><title>fts`&lt;realfft::ComplexToRealEven&lt;T&gt; as realfft::ComplexToReal&lt;T&gt;&gt;::process (5 samples, 0.02%)</title><rect x="80.5270%" y="133" width="0.0175%" height="15" fill="rgb(249,83,47)" fg:x="23042" fg:w="5"/><text x="80.7770%" y="143.50"></text></g><g><title>fts`DYLD-STUB$$memcpy (4 samples, 0.01%)</title><rect x="80.5515%" y="133" width="0.0140%" height="15" fill="rgb(215,43,3)" fg:x="23049" fg:w="4"/><text x="80.8015%" y="143.50"></text></g><g><title>fts`__rdl_alloc (5 samples, 0.02%)</title><rect x="80.5655%" y="133" width="0.0175%" height="15" fill="rgb(238,154,13)" fg:x="23053" fg:w="5"/><text x="80.8155%" y="143.50"></text></g><g><title>fts`rustfft::algorithm::radix4::bitreversed_transpose (5 samples, 0.02%)</title><rect x="85.5071%" y="69" width="0.0175%" height="15" fill="rgb(219,56,2)" fg:x="24467" fg:w="5"/><text x="85.7571%" y="79.50"></text></g><g><title>fts`rustfft::array_utils::iter_chunks (710 samples, 2.48%)</title><rect x="85.5246%" y="69" width="2.4813%" height="15" fill="rgb(233,0,4)" fg:x="24472" fg:w="710"/><text x="85.7746%" y="79.50">ft..</text></g><g><title>fts`rustfft::algorithm::radix4::bitreversed_transpose (547 samples, 1.91%)</title><rect x="93.7059%" y="53" width="1.9117%" height="15" fill="rgb(235,30,7)" fg:x="26813" fg:w="547"/><text x="93.9559%" y="63.50">f..</text></g><g><title>fts`&lt;rustfft::neon::neon_radix4::Neon64Radix4&lt;T&gt; as rustfft::Fft&lt;T&gt;&gt;::process_outofplace_with_scratch (3,038 samples, 10.62%)</title><rect x="85.4337%" y="85" width="10.6172%" height="15" fill="rgb(250,79,13)" fg:x="24446" fg:w="3038"/><text x="85.6837%" y="95.50">fts`&lt;rustfft::n..</text></g><g><title>fts`rustfft::neon::neon_radix4::Neon64Radix4&lt;T&gt;::perform_fft_out_of_place (2,302 samples, 8.05%)</title><rect x="88.0059%" y="69" width="8.0450%" height="15" fill="rgb(211,146,34)" fg:x="25182" fg:w="2302"/><text x="88.2559%" y="79.50">fts`rustfft..</text></g><g><title>fts`rustfft::algorithm::radix4::reverse_bits (124 samples, 0.43%)</title><rect x="95.6175%" y="53" width="0.4334%" height="15" fill="rgb(228,22,38)" fg:x="27360" fg:w="124"/><text x="95.8675%" y="63.50"></text></g><g><title>fts`&lt;realfft::ComplexToRealEven&lt;T&gt; as realfft::ComplexToReal&lt;T&gt;&gt;::process_with_scratch (3,994 samples, 13.96%)</title><rect x="82.1206%" y="101" width="13.9582%" height="15" fill="rgb(235,168,5)" fg:x="23498" fg:w="3994"/><text x="82.3706%" y="111.50">fts`&lt;realfft::Complex..</text></g><g><title>fts`rustfft::neon::neon_radix4::Neon64Radix4&lt;T&gt;::perform_fft_out_of_place (8 samples, 0.03%)</title><rect x="96.0509%" y="85" width="0.0280%" height="15" fill="rgb(221,155,16)" fg:x="27484" fg:w="8"/><text x="96.3009%" y="95.50"></text></g><g><title>fts`&lt;realfft::ComplexToRealEven&lt;T&gt; as realfft::ComplexToReal&lt;T&gt;&gt;::process (4,002 samples, 13.99%)</title><rect x="82.0997%" y="117" width="13.9862%" height="15" fill="rgb(215,215,53)" fg:x="23492" fg:w="4002"/><text x="82.3497%" y="127.50">fts`&lt;realfft::Complex..</text></g><g><title>fts`&lt;realfft::ComplexToRealEven&lt;T&gt; as realfft::ComplexToReal&lt;T&gt;&gt;::process_with_scratch (4 samples, 0.01%)</title><rect x="96.0858%" y="117" width="0.0140%" height="15" fill="rgb(223,4,10)" fg:x="27494" fg:w="4"/><text x="96.3358%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (27 samples, 0.09%)</title><rect x="96.1487%" y="101" width="0.0944%" height="15" fill="rgb(234,103,6)" fg:x="27512" fg:w="27"/><text x="96.3987%" y="111.50"></text></g><g><title>fts`ndrustfft::R2cFftHandler&lt;T&gt;::ifft_r2c_lane (4,496 samples, 15.71%)</title><rect x="80.5829%" y="133" width="15.7126%" height="15" fill="rgb(227,97,0)" fg:x="23058" fg:w="4496"/><text x="80.8329%" y="143.50">fts`ndrustfft::R2cFftHan..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (56 samples, 0.20%)</title><rect x="96.0998%" y="117" width="0.1957%" height="15" fill="rgb(234,150,53)" fg:x="27498" fg:w="56"/><text x="96.3498%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (15 samples, 0.05%)</title><rect x="96.2431%" y="101" width="0.0524%" height="15" fill="rgb(228,201,54)" fg:x="27539" fg:w="15"/><text x="96.4931%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (24 samples, 0.08%)</title><rect x="96.2955%" y="133" width="0.0839%" height="15" fill="rgb(222,22,37)" fg:x="27554" fg:w="24"/><text x="96.5455%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (13 samples, 0.05%)</title><rect x="96.3864%" y="133" width="0.0454%" height="15" fill="rgb(237,53,32)" fg:x="27580" fg:w="13"/><text x="96.6364%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_small (45 samples, 0.16%)</title><rect x="96.4318%" y="133" width="0.1573%" height="15" fill="rgb(233,25,53)" fg:x="27593" fg:w="45"/><text x="96.6818%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (6 samples, 0.02%)</title><rect x="96.5891%" y="133" width="0.0210%" height="15" fill="rgb(210,40,34)" fg:x="27638" fg:w="6"/><text x="96.8391%" y="143.50"></text></g><g><title>libsystem_platform.dylib`__bzero (3 samples, 0.01%)</title><rect x="96.6135%" y="133" width="0.0105%" height="15" fill="rgb(241,220,44)" fg:x="27645" fg:w="3"/><text x="96.8635%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (319 samples, 1.11%)</title><rect x="96.6240%" y="133" width="1.1148%" height="15" fill="rgb(235,28,35)" fg:x="27648" fg:w="319"/><text x="96.8740%" y="143.50"></text></g><g><title>fts`ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (5,162 samples, 18.04%)</title><rect x="80.5200%" y="149" width="18.0401%" height="15" fill="rgb(210,56,17)" fg:x="23040" fg:w="5162"/><text x="80.7700%" y="159.50">fts`ndarray::zip::Zip&lt;(P1,P2..</text></g><g><title>libsystem_platform.dylib`_platform_memset (235 samples, 0.82%)</title><rect x="97.7389%" y="133" width="0.8213%" height="15" fill="rgb(224,130,29)" fg:x="27967" fg:w="235"/><text x="97.9889%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_free (27 samples, 0.09%)</title><rect x="98.5636%" y="149" width="0.0944%" height="15" fill="rgb(235,212,8)" fg:x="28203" fg:w="27"/><text x="98.8136%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (11 samples, 0.04%)</title><rect x="98.6580%" y="149" width="0.0384%" height="15" fill="rgb(223,33,50)" fg:x="28230" fg:w="11"/><text x="98.9080%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (8 samples, 0.03%)</title><rect x="98.6964%" y="149" width="0.0280%" height="15" fill="rgb(219,149,13)" fg:x="28241" fg:w="8"/><text x="98.9464%" y="159.50"></text></g><g><title>fts`ndrustfft::ndifft_r2c (5,232 samples, 18.28%)</title><rect x="80.4501%" y="165" width="18.2848%" height="15" fill="rgb(250,156,29)" fg:x="23020" fg:w="5232"/><text x="80.7001%" y="175.50">fts`ndrustfft::ndifft_r2c</text></g><g><title>libsystem_malloc.dylib`free_small (3 samples, 0.01%)</title><rect x="98.7244%" y="149" width="0.0105%" height="15" fill="rgb(216,193,19)" fg:x="28249" fg:w="3"/><text x="98.9744%" y="159.50"></text></g><g><title>fts`&lt;fts::solvers::polymer::PolymerSolver as fts::solvers::solver::SolverOps&gt;::solve (28,248 samples, 98.72%)</title><rect x="0.0384%" y="181" width="98.7209%" height="15" fill="rgb(216,135,14)" fg:x="11" fg:w="28248"/><text x="0.2884%" y="191.50">fts`&lt;fts::solvers::polymer::PolymerSolver as fts::solvers::solver::SolverOps&gt;::solve</text></g><g><title>libsystem_platform.dylib`_platform_memset (4 samples, 0.01%)</title><rect x="98.7454%" y="165" width="0.0140%" height="15" fill="rgb(241,47,5)" fg:x="28255" fg:w="4"/><text x="98.9954%" y="175.50"></text></g><g><title>fts`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (9 samples, 0.03%)</title><rect x="98.7593%" y="165" width="0.0315%" height="15" fill="rgb(233,42,35)" fg:x="28259" fg:w="9"/><text x="99.0093%" y="175.50"></text></g><g><title>libopenblasp-r0.3.27.dylib`.Ldgemm_kernel_L4_M2_100 (4 samples, 0.01%)</title><rect x="98.7908%" y="85" width="0.0140%" height="15" fill="rgb(231,13,6)" fg:x="28268" fg:w="4"/><text x="99.0408%" y="95.50"></text></g><g><title>libopenblasp-r0.3.27.dylib`.Ldgemm_kernel_L4_M2_42 (3 samples, 0.01%)</title><rect x="98.8083%" y="85" width="0.0105%" height="15" fill="rgb(207,181,40)" fg:x="28273" fg:w="3"/><text x="99.0583%" y="95.50"></text></g><g><title>libopenblasp-r0.3.27.dylib`.Lgemm_beta_zero_05 (5 samples, 0.02%)</title><rect x="98.8292%" y="85" width="0.0175%" height="15" fill="rgb(254,173,49)" fg:x="28279" fg:w="5"/><text x="99.0792%" y="95.50"></text></g><g><title>fts`&lt;ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize (18 samples, 0.06%)</title><rect x="98.7908%" y="165" width="0.0629%" height="15" fill="rgb(221,1,38)" fg:x="28268" fg:w="18"/><text x="99.0408%" y="175.50"></text></g><g><title> 2]&gt;&gt; as ndarray::linalg::impl_linalg::Dot&lt;ndarray::ArrayBase&lt;S2,ndarray::dimension::dim::Dim&lt;[usize (18 samples, 0.06%)</title><rect x="98.7908%" y="149" width="0.0629%" height="15" fill="rgb(206,124,46)" fg:x="28268" fg:w="18"/><text x="99.0408%" y="159.50"></text></g><g><title> 2]&gt;&gt;&gt;&gt;::dot (18 samples, 0.06%)</title><rect x="98.7908%" y="133" width="0.0629%" height="15" fill="rgb(249,21,11)" fg:x="28268" fg:w="18"/><text x="99.0408%" y="143.50"></text></g><g><title>fts`ndarray::linalg::impl_linalg::mat_mul_impl (18 samples, 0.06%)</title><rect x="98.7908%" y="117" width="0.0629%" height="15" fill="rgb(222,201,40)" fg:x="28268" fg:w="18"/><text x="99.0408%" y="127.50"></text></g><g><title>libopenblasp-r0.3.27.dylib`cblas_dgemm (18 samples, 0.06%)</title><rect x="98.7908%" y="101" width="0.0629%" height="15" fill="rgb(235,61,29)" fg:x="28268" fg:w="18"/><text x="99.0408%" y="111.50"></text></g><g><title>fts`ndarray::impl_ops::arithmetic_ops::_&lt;impl core::ops::arith::Mul&lt;ndarray::ArrayBase&lt;S2,E&gt;&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::mul (4 samples, 0.01%)</title><rect x="98.8537%" y="165" width="0.0140%" height="15" fill="rgb(219,207,3)" fg:x="28286" fg:w="4"/><text x="99.1037%" y="175.50"></text></g><g><title>fts`ndarray::numeric::impl_numeric::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::sum (20 samples, 0.07%)</title><rect x="98.8677%" y="133" width="0.0699%" height="15" fill="rgb(222,56,46)" fg:x="28290" fg:w="20"/><text x="99.1177%" y="143.50"></text></g><g><title>fts`fts::domain::domain::Domain::ksq (53 samples, 0.19%)</title><rect x="98.7593%" y="181" width="0.1852%" height="15" fill="rgb(239,76,54)" fg:x="28259" fg:w="53"/><text x="99.0093%" y="191.50"></text></g><g><title>fts`ndarray::numeric::impl_numeric::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::sum_axis (22 samples, 0.08%)</title><rect x="98.8677%" y="165" width="0.0769%" height="15" fill="rgb(231,124,27)" fg:x="28290" fg:w="22"/><text x="99.1177%" y="175.50"></text></g><g><title>fts`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::build_uninit (22 samples, 0.08%)</title><rect x="98.8677%" y="149" width="0.0769%" height="15" fill="rgb(249,195,6)" fg:x="28290" fg:w="22"/><text x="99.1177%" y="159.50"></text></g><g><title>fts`fts::system::interaction::Interaction::add_gradients (8 samples, 0.03%)</title><rect x="98.9446%" y="181" width="0.0280%" height="15" fill="rgb(237,174,47)" fg:x="28312" fg:w="8"/><text x="99.1946%" y="191.50"></text></g><g><title>fts`ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_same_shape (8 samples, 0.03%)</title><rect x="98.9446%" y="165" width="0.0280%" height="15" fill="rgb(206,201,31)" fg:x="28312" fg:w="8"/><text x="99.1946%" y="175.50"></text></g><g><title>fts`ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map_inplace (16 samples, 0.06%)</title><rect x="98.9725%" y="181" width="0.0559%" height="15" fill="rgb(231,57,52)" fg:x="28320" fg:w="16"/><text x="99.2225%" y="191.50"></text></g><g><title>fts`ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_same_shape (36 samples, 0.13%)</title><rect x="99.0284%" y="181" width="0.1258%" height="15" fill="rgb(248,177,22)" fg:x="28336" fg:w="36"/><text x="99.2784%" y="191.50"></text></g><g><title>fts`ndarray::numeric::impl_numeric::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::mean (5 samples, 0.02%)</title><rect x="99.1543%" y="181" width="0.0175%" height="15" fill="rgb(215,211,37)" fg:x="28372" fg:w="5"/><text x="99.4043%" y="191.50"></text></g><g><title>fts`ndarray::zip::Zip&lt;(P1,P2,P3),D&gt;::for_each (15 samples, 0.05%)</title><rect x="99.1717%" y="181" width="0.0524%" height="15" fill="rgb(241,128,51)" fg:x="28377" fg:w="15"/><text x="99.4217%" y="191.50"></text></g><g><title>fts`fts::system::system::System::update (28,382 samples, 99.19%)</title><rect x="0.0384%" y="197" width="99.1892%" height="15" fill="rgb(227,165,31)" fg:x="11" fg:w="28382"/><text x="0.2884%" y="207.50">fts`fts::system::system::System::update</text></g><g><title>fts`ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_same_shape (5 samples, 0.02%)</title><rect x="99.2277%" y="197" width="0.0175%" height="15" fill="rgb(228,167,24)" fg:x="28393" fg:w="5"/><text x="99.4777%" y="207.50"></text></g><g><title>fts`fts::simulation::updater::FieldUpdater::step (28,399 samples, 99.25%)</title><rect x="0.0349%" y="213" width="99.2486%" height="15" fill="rgb(228,143,12)" fg:x="10" fg:w="28399"/><text x="0.2849%" y="223.50">fts`fts::simulation::updater::FieldUpdater::step</text></g><g><title>fts`ndarray::zip::Zip&lt;(P1,P2,P3),D&gt;::for_each (11 samples, 0.04%)</title><rect x="99.2451%" y="197" width="0.0384%" height="15" fill="rgb(249,149,8)" fg:x="28398" fg:w="11"/><text x="99.4951%" y="207.50"></text></g><g><title>fts`fts::system::interaction::Interaction::energy (12 samples, 0.04%)</title><rect x="99.2836%" y="197" width="0.0419%" height="15" fill="rgb(243,35,44)" fg:x="28409" fg:w="12"/><text x="99.5336%" y="207.50"></text></g><g><title>fts`ndarray::zip::Zip&lt;(P1,P2),D&gt;::fold (12 samples, 0.04%)</title><rect x="99.2836%" y="181" width="0.0419%" height="15" fill="rgb(246,89,9)" fg:x="28409" fg:w="12"/><text x="99.5336%" y="191.50"></text></g><g><title>fts`fts::system::system::System::free_energy (27 samples, 0.09%)</title><rect x="99.2836%" y="213" width="0.0944%" height="15" fill="rgb(233,213,13)" fg:x="28409" fg:w="27"/><text x="99.5336%" y="223.50"></text></g><g><title>fts`ndarray::zip::Zip&lt;(P1,P2),D&gt;::fold (15 samples, 0.05%)</title><rect x="99.3255%" y="197" width="0.0524%" height="15" fill="rgb(233,141,41)" fg:x="28421" fg:w="15"/><text x="99.5755%" y="207.50"></text></g><g><title>fts`ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::fold (32 samples, 0.11%)</title><rect x="99.3779%" y="213" width="0.1118%" height="15" fill="rgb(239,167,4)" fg:x="28436" fg:w="32"/><text x="99.6279%" y="223.50"></text></g><g><title>fts`fts::simulation::scft::SCFT::run (28,461 samples, 99.47%)</title><rect x="0.0349%" y="229" width="99.4653%" height="15" fill="rgb(209,217,16)" fg:x="10" fg:w="28461"/><text x="0.2849%" y="239.50">fts`fts::simulation::scft::SCFT::run</text></g><g><title>fts`std::io::stdio::_print (3 samples, 0.01%)</title><rect x="99.4898%" y="213" width="0.0105%" height="15" fill="rgb(219,88,35)" fg:x="28468" fg:w="3"/><text x="99.7398%" y="223.50"></text></g><g><title>fts`&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (3 samples, 0.01%)</title><rect x="99.4898%" y="197" width="0.0105%" height="15" fill="rgb(220,193,23)" fg:x="28468" fg:w="3"/><text x="99.7398%" y="207.50"></text></g><g><title>fts`core::fmt::write (3 samples, 0.01%)</title><rect x="99.4898%" y="181" width="0.0105%" height="15" fill="rgb(230,90,52)" fg:x="28468" fg:w="3"/><text x="99.7398%" y="191.50"></text></g><g><title>fts`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (3 samples, 0.01%)</title><rect x="99.4898%" y="165" width="0.0105%" height="15" fill="rgb(252,106,19)" fg:x="28468" fg:w="3"/><text x="99.7398%" y="175.50"></text></g><g><title>fts`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (3 samples, 0.01%)</title><rect x="99.4898%" y="149" width="0.0105%" height="15" fill="rgb(206,74,20)" fg:x="28468" fg:w="3"/><text x="99.7398%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`write (3 samples, 0.01%)</title><rect x="99.4898%" y="133" width="0.0105%" height="15" fill="rgb(230,138,44)" fg:x="28468" fg:w="3"/><text x="99.7398%" y="143.50"></text></g><g><title>fts`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8 samples, 0.03%)</title><rect x="99.5037%" y="149" width="0.0280%" height="15" fill="rgb(235,182,43)" fg:x="28472" fg:w="8"/><text x="99.7537%" y="159.50"></text></g><g><title>fts`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zeros (8 samples, 0.03%)</title><rect x="99.5037%" y="133" width="0.0280%" height="15" fill="rgb(242,16,51)" fg:x="28472" fg:w="8"/><text x="99.7537%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (8 samples, 0.03%)</title><rect x="99.5037%" y="117" width="0.0280%" height="15" fill="rgb(248,9,4)" fg:x="28472" fg:w="8"/><text x="99.7537%" y="127.50"></text></g><g><title>libsystem_platform.dylib`__bzero (8 samples, 0.03%)</title><rect x="99.5037%" y="101" width="0.0280%" height="15" fill="rgb(210,31,22)" fg:x="28472" fg:w="8"/><text x="99.7537%" y="111.50"></text></g><g><title>fts`fts::system::system::System::new (11 samples, 0.04%)</title><rect x="99.5002%" y="229" width="0.0384%" height="15" fill="rgb(239,54,39)" fg:x="28471" fg:w="11"/><text x="99.7502%" y="239.50"></text></g><g><title>fts`alloc::vec::in_place_collect::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (10 samples, 0.03%)</title><rect x="99.5037%" y="213" width="0.0349%" height="15" fill="rgb(230,99,41)" fg:x="28472" fg:w="10"/><text x="99.7537%" y="223.50"></text></g><g><title>fts`fts::solvers::polymer::PolymerSolver::new (10 samples, 0.03%)</title><rect x="99.5037%" y="197" width="0.0349%" height="15" fill="rgb(253,106,12)" fg:x="28472" fg:w="10"/><text x="99.7537%" y="207.50"></text></g><g><title>fts`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (10 samples, 0.03%)</title><rect x="99.5037%" y="181" width="0.0349%" height="15" fill="rgb(213,46,41)" fg:x="28472" fg:w="10"/><text x="99.7537%" y="191.50"></text></g><g><title>fts`fts::solvers::block::BlockSolver::new (10 samples, 0.03%)</title><rect x="99.5037%" y="165" width="0.0349%" height="15" fill="rgb(215,133,35)" fg:x="28472" fg:w="10"/><text x="99.7537%" y="175.50"></text></g><g><title>fts`fts::solvers::block::BlockSolver::update_concentration (3 samples, 0.01%)</title><rect x="99.5387%" y="197" width="0.0105%" height="15" fill="rgb(213,28,5)" fg:x="28482" fg:w="3"/><text x="99.7887%" y="207.50"></text></g><g><title>fts`ndarray::zip::Zip&lt;(P1,P2,P3),D&gt;::for_each (3 samples, 0.01%)</title><rect x="99.5387%" y="181" width="0.0105%" height="15" fill="rgb(215,77,49)" fg:x="28482" fg:w="3"/><text x="99.7887%" y="191.50"></text></g><g><title>fts`ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_same_shape (21 samples, 0.07%)</title><rect x="99.5562%" y="197" width="0.0734%" height="15" fill="rgb(248,100,22)" fg:x="28487" fg:w="21"/><text x="99.8062%" y="207.50"></text></g><g><title>fts`ndarray::zip::Zip&lt;(P1,P2,P3),D&gt;::for_each (9 samples, 0.03%)</title><rect x="99.6296%" y="197" width="0.0315%" height="15" fill="rgb(208,67,9)" fg:x="28508" fg:w="9"/><text x="99.8796%" y="207.50"></text></g><g><title>fts`rustfft::array_utils::iter_chunks (5 samples, 0.02%)</title><rect x="99.6750%" y="133" width="0.0175%" height="15" fill="rgb(219,133,21)" fg:x="28521" fg:w="5"/><text x="99.9250%" y="143.50"></text></g><g><title>fts`rustfft::Fft::process (13 samples, 0.05%)</title><rect x="99.6750%" y="149" width="0.0454%" height="15" fill="rgb(246,46,29)" fg:x="28521" fg:w="13"/><text x="99.9250%" y="159.50"></text></g><g><title>fts`rustfft::neon::neon_radix4::Neon64Radix4&lt;T&gt;::perform_fft_out_of_place (8 samples, 0.03%)</title><rect x="99.6925%" y="133" width="0.0280%" height="15" fill="rgb(246,185,52)" fg:x="28526" fg:w="8"/><text x="99.9425%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.01%)</title><rect x="99.7239%" y="149" width="0.0105%" height="15" fill="rgb(252,136,11)" fg:x="28535" fg:w="3"/><text x="99.9739%" y="159.50"></text></g><g><title>fts`ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each::_{{closure}} (22 samples, 0.08%)</title><rect x="99.6610%" y="165" width="0.0769%" height="15" fill="rgb(219,138,53)" fg:x="28517" fg:w="22"/><text x="99.9110%" y="175.50"></text></g><g><title>fts`ndrustfft::ndfft (23 samples, 0.08%)</title><rect x="99.6610%" y="197" width="0.0804%" height="15" fill="rgb(211,51,23)" fg:x="28517" fg:w="23"/><text x="99.9110%" y="207.50"></text></g><g><title>fts`ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (23 samples, 0.08%)</title><rect x="99.6610%" y="181" width="0.0804%" height="15" fill="rgb(247,221,28)" fg:x="28517" fg:w="23"/><text x="99.9110%" y="191.50"></text></g><g><title>fts`rustfft::array_utils::iter_chunks (5 samples, 0.02%)</title><rect x="99.7589%" y="101" width="0.0175%" height="15" fill="rgb(251,222,45)" fg:x="28545" fg:w="5"/><text x="100.0089%" y="111.50"></text></g><g><title>fts`&lt;realfft::RealToComplexEven&lt;T&gt; as realfft::RealToComplex&lt;T&gt;&gt;::process (23 samples, 0.08%)</title><rect x="99.7414%" y="149" width="0.0804%" height="15" fill="rgb(217,162,53)" fg:x="28540" fg:w="23"/><text x="99.9914%" y="159.50"></text></g><g><title>fts`&lt;realfft::RealToComplexEven&lt;T&gt; as realfft::RealToComplex&lt;T&gt;&gt;::process_with_scratch (23 samples, 0.08%)</title><rect x="99.7414%" y="133" width="0.0804%" height="15" fill="rgb(229,93,14)" fg:x="28540" fg:w="23"/><text x="99.9914%" y="143.50"></text></g><g><title>fts`&lt;rustfft::neon::neon_radix4::Neon64Radix4&lt;T&gt; as rustfft::Fft&lt;T&gt;&gt;::process_outofplace_with_scratch (18 samples, 0.06%)</title><rect x="99.7589%" y="117" width="0.0629%" height="15" fill="rgb(209,67,49)" fg:x="28545" fg:w="18"/><text x="100.0089%" y="127.50"></text></g><g><title>fts`rustfft::neon::neon_radix4::Neon64Radix4&lt;T&gt;::perform_fft_out_of_place (13 samples, 0.05%)</title><rect x="99.7763%" y="101" width="0.0454%" height="15" fill="rgb(213,87,29)" fg:x="28550" fg:w="13"/><text x="100.0263%" y="111.50"></text></g><g><title>fts`ndrustfft::R2cFftHandler&lt;T&gt;::fft_r2c_lane (24 samples, 0.08%)</title><rect x="99.7414%" y="165" width="0.0839%" height="15" fill="rgb(205,151,52)" fg:x="28540" fg:w="24"/><text x="99.9914%" y="175.50"></text></g><g><title>fts`ndrustfft::ndfft_r2c (25 samples, 0.09%)</title><rect x="99.7414%" y="197" width="0.0874%" height="15" fill="rgb(253,215,39)" fg:x="28540" fg:w="25"/><text x="99.9914%" y="207.50"></text></g><g><title>fts`ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (25 samples, 0.09%)</title><rect x="99.7414%" y="181" width="0.0874%" height="15" fill="rgb(221,220,41)" fg:x="28540" fg:w="25"/><text x="99.9914%" y="191.50"></text></g><g><title>fts`ndarray::iterators::to_vec_mapped (5 samples, 0.02%)</title><rect x="99.8357%" y="149" width="0.0175%" height="15" fill="rgb(218,133,21)" fg:x="28567" fg:w="5"/><text x="100.0857%" y="159.50"></text></g><g><title>fts`rustfft::array_utils::iter_chunks (5 samples, 0.02%)</title><rect x="99.8602%" y="117" width="0.0175%" height="15" fill="rgb(221,193,43)" fg:x="28574" fg:w="5"/><text x="100.1102%" y="127.50"></text></g><g><title>fts`rustfft::neon::neon_radix4::Neon64Radix4&lt;T&gt;::perform_fft_out_of_place (4 samples, 0.01%)</title><rect x="99.8777%" y="117" width="0.0140%" height="15" fill="rgb(240,128,52)" fg:x="28579" fg:w="4"/><text x="100.1277%" y="127.50"></text></g><g><title>fts`rustfft::Fft::process (10 samples, 0.03%)</title><rect x="99.8602%" y="133" width="0.0349%" height="15" fill="rgb(253,114,12)" fg:x="28574" fg:w="10"/><text x="100.1102%" y="143.50"></text></g><g><title>fts`ndrustfft::FftHandler&lt;T&gt;::ifft_lane (13 samples, 0.05%)</title><rect x="99.8532%" y="149" width="0.0454%" height="15" fill="rgb(215,223,47)" fg:x="28572" fg:w="13"/><text x="100.1032%" y="159.50"></text></g><g><title>fts`ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each::_{{closure}} (23 samples, 0.08%)</title><rect x="99.8288%" y="165" width="0.0804%" height="15" fill="rgb(248,225,23)" fg:x="28565" fg:w="23"/><text x="100.0788%" y="175.50"></text></g><g><title>fts`ndrustfft::ndifft (24 samples, 0.08%)</title><rect x="99.8288%" y="197" width="0.0839%" height="15" fill="rgb(250,108,0)" fg:x="28565" fg:w="24"/><text x="100.0788%" y="207.50"></text></g><g><title>fts`ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (24 samples, 0.08%)</title><rect x="99.8288%" y="181" width="0.0839%" height="15" fill="rgb(228,208,7)" fg:x="28565" fg:w="24"/><text x="100.0788%" y="191.50"></text></g><g><title>fts`ndrustfft::R2cFftHandler&lt;T&gt;::ifft_r2c_lane (18 samples, 0.06%)</title><rect x="99.9126%" y="165" width="0.0629%" height="15" fill="rgb(244,45,10)" fg:x="28589" fg:w="18"/><text x="100.1626%" y="175.50"></text></g><g><title>fts`&lt;realfft::ComplexToRealEven&lt;T&gt; as realfft::ComplexToReal&lt;T&gt;&gt;::process (15 samples, 0.05%)</title><rect x="99.9231%" y="149" width="0.0524%" height="15" fill="rgb(207,125,25)" fg:x="28592" fg:w="15"/><text x="100.1731%" y="159.50"></text></g><g><title>fts`&lt;realfft::ComplexToRealEven&lt;T&gt; as realfft::ComplexToReal&lt;T&gt;&gt;::process_with_scratch (15 samples, 0.05%)</title><rect x="99.9231%" y="133" width="0.0524%" height="15" fill="rgb(210,195,18)" fg:x="28592" fg:w="15"/><text x="100.1731%" y="143.50"></text></g><g><title>fts`&lt;rustfft::neon::neon_radix4::Neon64Radix4&lt;T&gt; as rustfft::Fft&lt;T&gt;&gt;::process_outofplace_with_scratch (12 samples, 0.04%)</title><rect x="99.9336%" y="117" width="0.0419%" height="15" fill="rgb(249,80,12)" fg:x="28595" fg:w="12"/><text x="100.1836%" y="127.50"></text></g><g><title>fts`rustfft::neon::neon_radix4::Neon64Radix4&lt;T&gt;::perform_fft_out_of_place (11 samples, 0.04%)</title><rect x="99.9371%" y="101" width="0.0384%" height="15" fill="rgb(221,65,9)" fg:x="28596" fg:w="11"/><text x="100.1871%" y="111.50"></text></g><g><title>fts`ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (22 samples, 0.08%)</title><rect x="99.9126%" y="181" width="0.0769%" height="15" fill="rgb(235,49,36)" fg:x="28589" fg:w="22"/><text x="100.1626%" y="191.50"></text></g><g><title>fts`&lt;fts::solvers::polymer::PolymerSolver as fts::solvers::solver::SolverOps&gt;::solve (130 samples, 0.45%)</title><rect x="99.5387%" y="213" width="0.4543%" height="15" fill="rgb(225,32,20)" fg:x="28482" fg:w="130"/><text x="99.7887%" y="223.50"></text></g><g><title>fts`ndrustfft::ndifft_r2c (23 samples, 0.08%)</title><rect x="99.9126%" y="197" width="0.0804%" height="15" fill="rgb(215,141,46)" fg:x="28589" fg:w="23"/><text x="100.1626%" y="207.50"></text></g><g><title>dyld`start (28,613 samples, 100.00%)</title><rect x="0.0000%" y="325" width="99.9965%" height="15" fill="rgb(250,160,47)" fg:x="0" fg:w="28613"/><text x="0.2500%" y="335.50">dyld`start</text></g><g><title>fts`main (28,613 samples, 100.00%)</title><rect x="0.0000%" y="309" width="99.9965%" height="15" fill="rgb(216,222,40)" fg:x="0" fg:w="28613"/><text x="0.2500%" y="319.50">fts`main</text></g><g><title>fts`std::rt::lang_start_internal (28,613 samples, 100.00%)</title><rect x="0.0000%" y="293" width="99.9965%" height="15" fill="rgb(234,217,39)" fg:x="0" fg:w="28613"/><text x="0.2500%" y="303.50">fts`std::rt::lang_start_internal</text></g><g><title>fts`std::rt::lang_start::_{{closure}} (28,613 samples, 100.00%)</title><rect x="0.0000%" y="277" width="99.9965%" height="15" fill="rgb(207,178,40)" fg:x="0" fg:w="28613"/><text x="0.2500%" y="287.50">fts`std::rt::lang_start::_{{closure}}</text></g><g><title>fts`std::sys_common::backtrace::__rust_begin_short_backtrace (28,613 samples, 100.00%)</title><rect x="0.0000%" y="261" width="99.9965%" height="15" fill="rgb(221,136,13)" fg:x="0" fg:w="28613"/><text x="0.2500%" y="271.50">fts`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>fts`fts::main (28,613 samples, 100.00%)</title><rect x="0.0000%" y="245" width="99.9965%" height="15" fill="rgb(249,199,10)" fg:x="0" fg:w="28613"/><text x="0.2500%" y="255.50">fts`fts::main</text></g><g><title>fts`fts::system::system::System::update (131 samples, 0.46%)</title><rect x="99.5387%" y="229" width="0.4578%" height="15" fill="rgb(249,222,13)" fg:x="28482" fg:w="131"/><text x="99.7887%" y="239.50"></text></g><g><title>all (28,614 samples, 100%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(244,185,38)" fg:x="0" fg:w="28614"/><text x="0.2500%" y="351.50"></text></g></svg></svg>